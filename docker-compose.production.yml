# ====================================================================
# LightRAG Production Docker Compose Configuration
# ====================================================================
# This file sets up a complete production environment for LightRAG
# including all necessary services, monitoring, and security features.
#
# Usage:
# 1. Copy production.env to .env and configure your settings
# 2. Run: docker-compose -f docker-compose.production.yml up -d
#
# Services included:
# - LightRAG Application (with Gunicorn)
# - PostgreSQL Database with pgvector
# - Redis Cache
# - Nginx Reverse Proxy
# - Prometheus Monitoring
# - Grafana Dashboard
# - Jaeger Tracing
# ====================================================================

version: '3.8'

networks:
  lightrag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  nginx_cache:
    driver: local
  nginx_run:
    driver: local
  lightrag_logs:
    driver: local
  lightrag_data:
    driver: local
  loki_data:
    driver: local
  docling_cache:
    driver: local
  docling_logs:
    driver: local

services:
  # ===================================================================
  # LightRAG Application Service
  # ===================================================================
  lightrag:
    container_name: lightrag_app
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-latest}
    image: lightrag:production
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      docling-service:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PYTHON_ENV=production
      # Docling service integration
      - DOCLING_SERVICE_URL=http://docling-service:8080
      - DOCLING_SERVICE_TIMEOUT=300
      - DOCLING_SERVICE_RETRIES=3
      - DOCLING_FALLBACK_ENABLED=true
      - LIGHTRAG_ENHANCED_PROCESSING=true
    env_file:
      - .env
    volumes:
      - lightrag_data:/app/data
      - lightrag_logs:/app/logs
      - ./certs:/app/certs:ro
    networks:
      - lightrag-network
    ports:
      - "127.0.0.1:9621:9621"  # Expose API for MCP server access
    extra_hosts:
      - "host.docker.internal:host-gateway"  # Allow access to host services like Ollama
    healthcheck:
      test: ["CMD", "/app/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "5"

  # ===================================================================
  # PostgreSQL Database Service
  # ===================================================================
  postgres:
    container_name: lightrag_postgres
    image: shangor/postgres-for-rag:v1.0
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    # PostgreSQL container runs as postgres user internally
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-lightrag_prod}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE:-lightrag_production}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
      # Performance tuning - AGE must be in shared_preload_libraries for graph functionality
      POSTGRES_SHARED_PRELOAD_LIBRARIES: age,pg_stat_statements,auto_explain
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./postgres/config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - lightrag-network
    ports:
      - "127.0.0.1:5433:5432"  # Only bind to localhost for security (changed to 5433 to avoid port conflict)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-lightrag_prod} -d ${POSTGRES_DATABASE:-lightrag_production}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "3"

  # ===================================================================
  # Redis Cache Service
  # ===================================================================
  redis:
    container_name: lightrag_redis
    image: redis:7-alpine
    restart: unless-stopped
    user: "999:999"  # Run as redis user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - lightrag-network
    ports:
      - "127.0.0.1:6380:6379"  # Only bind to localhost for security (changed to 6380 to avoid port conflict)
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"

  # ===================================================================
  # Nginx Reverse Proxy
  # ===================================================================
  # Nginx init container to set up permissions
  nginx-init:
    container_name: lightrag_nginx_init
    image: alpine:latest
    user: "0:0"  # Run as root only for initialization
    volumes:
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
      - nginx_run:/var/run
    command: >
      sh -c "
        mkdir -p /var/cache/nginx/client_temp /var/cache/nginx/proxy_temp /var/cache/nginx/fastcgi_temp /var/cache/nginx/uwsgi_temp /var/cache/nginx/scgi_temp &&
        chown -R 101:101 /var/cache/nginx /var/log/nginx /var/run
      "

  nginx:
    container_name: lightrag_nginx
    image: nginx:alpine
    restart: unless-stopped
    user: "101:101"  # Run as nginx user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    depends_on:
      nginx-init:
        condition: service_completed_successfully
      lightrag:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
      - nginx_run:/var/run
    networks:
      - lightrag-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "3"

  # ===================================================================
  # Prometheus Monitoring
  # ===================================================================
  prometheus:
    container_name: lightrag_prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    user: "65534:65534"  # Run as nobody user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - lightrag-network
    ports:
      - "127.0.0.1:9091:9090"  # Only bind to localhost for security (changed to 9091 to avoid port conflict)
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # ===================================================================
  # Grafana Dashboard
  # ===================================================================
  grafana:
    container_name: lightrag_grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    user: "472:472"  # Run as grafana user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - lightrag-network
    ports:
      - "127.0.0.1:3000:3000"  # Only bind to localhost for security
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ===================================================================
  # Jaeger Tracing
  # ===================================================================
  jaeger:
    container_name: lightrag_jaeger
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    user: "10001:10001"  # Run as non-root user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
    networks:
      - lightrag-network
    ports:
      - "127.0.0.1:16686:16686"  # Jaeger UI
      - "127.0.0.1:14268:14268"  # Jaeger collector
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ===================================================================
  # Log Aggregation (Optional)
  # ===================================================================
  loki:
    container_name: lightrag_loki
    image: grafana/loki:latest
    restart: unless-stopped
    user: "10001:10001"  # Run as non-root user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - lightrag-network
    ports:
      - "127.0.0.1:3100:3100"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ===================================================================
  # Backup Service (Optional)
  # ===================================================================
  backup:
    container_name: lightrag_backup
    build:
      context: ./backup
      dockerfile: Dockerfile
    restart: unless-stopped
    user: "1000:1000"  # Run as non-root user
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE
      - SYS_ADMIN  # Needed for cron setpgid operations
    depends_on:
      - postgres
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER:-lightrag_prod}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE:-lightrag_production}
    volumes:
      - ./backups:/app/backups
      - lightrag_data:/app/data:ro
    networks:
      - lightrag-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

  # ===================================================================
  # Docling Service (Production)
  # ===================================================================
  docling-service:
    container_name: lightrag_docling_prod
    profiles: ["enhanced-processing", "full"]
    build:
      context: ./lightrag-docling
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-1.0.0}
    image: lightrag-docling:production
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    environment:
      - DOCLING_HOST=0.0.0.0
      - DOCLING_PORT=8080
      - DOCLING_LOG_LEVEL=INFO
      - DOCLING_DEBUG=false

      # Processing configuration
      - DOCLING_DEFAULT_EXPORT_FORMAT=markdown
      - DOCLING_DEFAULT_MAX_WORKERS=${DOCLING_WORKERS:-3}
      - DOCLING_DEFAULT_ENABLE_OCR=true
      - DOCLING_DEFAULT_ENABLE_TABLE_STRUCTURE=true
      - DOCLING_DEFAULT_ENABLE_FIGURES=true

      # Cache configuration
      - DOCLING_CACHE_ENABLED=true
      - DOCLING_CACHE_DIR=/app/cache
      - DOCLING_CACHE_MAX_SIZE_GB=${DOCLING_CACHE_SIZE:-5}
      - DOCLING_CACHE_TTL_HOURS=168

      # Production limits
      - DOCLING_MAX_FILE_SIZE_MB=${DOCLING_MAX_FILE_SIZE:-100}
      - DOCLING_MAX_BATCH_SIZE=${DOCLING_MAX_BATCH_SIZE:-10}
      - DOCLING_REQUEST_TIMEOUT_SECONDS=300

      # Security
      - DOCLING_API_KEY=${DOCLING_API_KEY:-}
      - DOCLING_CORS_ORIGINS=http://lightrag:9621

      # Monitoring
      - DOCLING_METRICS_ENABLED=true
    volumes:
      - docling_cache:/app/cache
      - docling_logs:/app/logs
    networks:
      - lightrag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '3.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "3"
