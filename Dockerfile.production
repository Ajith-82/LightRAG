# ====================================================================
# Production-Optimized Dockerfile for LightRAG
# ====================================================================
# This Dockerfile is specifically designed for production deployments
# with security, performance, and reliability optimizations.

ARG PYTHON_VERSION=3.11
ARG DEBIAN_VERSION=bookworm

# ===================================================================
# Builder Stage - Dependencies and Build
# ===================================================================
FROM python:${PYTHON_VERSION}-slim-${DEBIAN_VERSION} AS builder

# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Labels for container metadata
LABEL maintainer="LightRAG Team" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="lightrag" \
      org.label-schema.description="Production LightRAG Container" \
      org.label-schema.url="https://github.com/Ajith-82/LightRAG" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/Ajith-82/LightRAG" \
      org.label-schema.vendor="Ajith-82" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0"

# Set environment variables for build
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_VENV_IN_PROJECT=1

WORKDIR /build

# Install system dependencies and security updates
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        build-essential \
        pkg-config \
        curl \
        git \
        ca-certificates \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install Rust for cryptographic dependencies
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Copy dependency definitions
COPY pyproject.toml setup.py MANIFEST.in ./
COPY lightrag/ ./lightrag/

# Create virtual environment and install dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies with security and performance optimizations
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir \
        ".[api]" \
        # Core dependencies
        nano-vectordb \
        networkx \
        # LLM and embedding dependencies
        openai \
        ollama \
        tiktoken \
        # Document processing dependencies
        pypdf2 \
        python-docx \
        python-pptx \
        openpyxl \
        # Production dependencies
        gunicorn \
        uvicorn[standard] \
        prometheus-client \
        # Security dependencies
        cryptography \
        bcrypt \
        # Monitoring and logging
        structlog \
        opentelemetry-api \
        opentelemetry-sdk \
        opentelemetry-exporter-otlp \
        opentelemetry-instrumentation-fastapi \
        opentelemetry-instrumentation-psycopg2 \
    && pip check

# ===================================================================
# Final Production Stage
# ===================================================================
FROM python:${PYTHON_VERSION}-slim-${DEBIAN_VERSION} AS production

# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Labels
LABEL maintainer="LightRAG Team" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="lightrag-production" \
      org.label-schema.description="Production LightRAG Container" \
      org.label-schema.version=$VERSION

# Set production environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    PATH="/opt/venv/bin:$PATH" \
    NODE_ENV=production \
    PYTHON_ENV=production

# Install runtime dependencies and security updates
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        # Runtime dependencies
        curl \
        ca-certificates \
        # Health check dependencies
        netcat-traditional \
        # File processing dependencies
        poppler-utils \
        # Process monitoring
        procps \
        # Time zone data
        tzdata \
    && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Create application user and group for security
RUN groupadd --system --gid 1001 lightrag && \
    useradd --system --uid 1001 --gid lightrag --shell /bin/bash \
           --home-dir /app --create-home lightrag

# Set up directory structure
WORKDIR /app

# Create necessary directories with proper permissions
RUN mkdir -p \
        /app/data/rag_storage \
        /app/data/inputs \
        /app/data/backups \
        /app/logs \
        /app/certs \
        /app/tmp && \
    chown -R lightrag:lightrag /app

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Copy application code
COPY --chown=lightrag:lightrag lightrag/ ./lightrag/
COPY --chown=lightrag:lightrag setup.py ./

# Copy configuration files
COPY --chown=lightrag:lightrag production.env ./production.env
COPY --chown=lightrag:lightrag lightrag/api/gunicorn_config.py ./gunicorn_config.py

# Copy production startup script
COPY --chown=lightrag:lightrag scripts/start-production.sh ./start-production.sh
RUN chmod +x ./start-production.sh

# Create health check script
RUN echo '#!/bin/bash' > /app/health-check.sh && \
    echo 'curl -f http://localhost:${PORT:-9621}/health || exit 1' >> /app/health-check.sh && \
    chmod +x /app/health-check.sh

# Switch to application user
USER lightrag

# Set working directory
WORKDIR /app

# Expose port
EXPOSE 9621

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ["/app/health-check.sh"]

# Set the entrypoint
ENTRYPOINT ["/app/start-production.sh"]

# Default command (can be overridden)
CMD []
