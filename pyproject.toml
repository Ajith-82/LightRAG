[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lightrag-hku"
dynamic = ["version"]
authors = [
    {name = "Zirui Guo"}
]
description = "LightRAG: Simple and Fast Retrieval-Augmented Generation"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "aiohttp",
    "configparser",
    "dotenv",
    "future",
    "nano-vectordb",
    "networkx",
    "numpy",
    "pandas>=2.0.0",
    "pipmaster",
    "pydantic",
    "python-dotenv",
    "pyuca",
    "setuptools",
    "tenacity",
    "tiktoken",
    "xlsxwriter>=3.1.0",
]

[project.optional-dependencies]
api = [
    # Core dependencies
    "aiohttp",
    "configparser",
    "dotenv",
    "future",
    "numpy",
    "openai",
    "pandas>=2.0.0",
    "pipmaster",
    "pydantic",
    "python-dotenv",
    "pyuca",
    "setuptools",
    "tenacity",
    "tiktoken",
    "xlsxwriter>=3.1.0",
    # API-specific dependencies
    "aiofiles",
    "ascii_colors",
    "asyncpg",
    "distro",
    "fastapi",
    "httpcore",
    "httpx",
    "jiter",
    "passlib[bcrypt]",
    "psutil",
    "psycopg2-binary",
    "PyJWT",
    "python-jose[cryptography]",
    "python-multipart",
    "pytz",
    "redis",
    "slowapi",
    "uvicorn",
]

test = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "scikit-learn",
    "scipy",
    "faiss-cpu",
    "networkx",
    # Document processing dependencies
    "pypdf2",
    "python-docx",
    # Core LightRAG dependencies
    "tenacity",
    "pipmaster",
    "pyuca",
    "nano-vectordb",
    "python-dotenv",
    # API testing dependencies
    "pyjwt",
    "uvicorn",
    "aiofiles",
    # Phase 3 production testing dependencies
    "docker",
    "kubernetes",
    "prometheus-client",
    "requests",
    "aiohttp",
    "pyyaml",
    "numpy",
    "locust",
    "psutil",
    "cryptography",
    "bcrypt",
    "passlib"
]

[project.scripts]
lightrag-server = "lightrag.api.lightrag_server:main"
lightrag-gunicorn = "lightrag.api.run_with_gunicorn:main"

[project.urls]
Homepage = "https://github.com/HKUDS/LightRAG"
Documentation = "https://github.com/HKUDS/LightRAG"
Repository = "https://github.com/HKUDS/LightRAG"
"Bug Tracker" = "https://github.com/HKUDS/LightRAG/issues"

[tool.setuptools.packages.find]
include = ["lightrag*"]

[tool.setuptools]
include-package-data = true

[tool.setuptools.dynamic]
version = {attr = "lightrag.__version__"}

[tool.setuptools.package-data]
lightrag = ["api/webui/**/*"]

[tool.ruff]
target-version = "py310"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=lightrag",
    "--cov=lightrag_mcp",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=70",
    "--tb=short",
]
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "storage: marks tests as storage tests",
    "core: marks tests as core functionality tests",
    "llm: marks tests as LLM provider tests",
    "document: marks tests as document processing tests",
    "graph: marks tests as knowledge graph tests",
    "vector: marks tests as vector operations tests",
    "rag: marks tests as RAG query tests",
    "mcp: marks tests as MCP server tests",
    "phase1: marks tests as Phase 1 infrastructure tests",
    "phase2: marks tests as Phase 2 core functionality tests",
    "phase3: marks tests as Phase 3 production hardening tests",
    "production: marks tests as production environment tests",
    "deployment: marks tests as deployment and infrastructure tests",
    "performance: marks tests as performance and load tests",
    "monitoring: marks tests as monitoring and observability tests",
    "disaster_recovery: marks tests as backup and disaster recovery tests",
    "containers: marks tests as container and orchestration tests",
    "security_hardening: marks tests as security hardening tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["lightrag", "lightrag_mcp"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/examples/*",
    "*/docs/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "except ModuleNotFoundError:",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "examples", "docs", "build", "dist"]
skips = ["B101", "B601"]
