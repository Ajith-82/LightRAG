# Tox configuration for LightRAG
# Tox is a tool for running tests in multiple Python environments

[tox]
envlist = 
    py{310,311,312}
    lint
    security
    coverage
    docs
    package
minversion = 4.0
isolated_build = true

[gh-actions]
# GitHub Actions Python version mapping
python =
    3.10: py310
    3.11: py311
    3.12: py312

[testenv]
# Base test environment configuration
deps = 
    pytest
    pytest-asyncio
    pytest-cov
    pytest-mock
    requests
    psycopg2-binary
    redis
    faiss-cpu
    networkx
    scikit-learn
    scipy
extras = test,api
setenv =
    PYTHONPATH = {toxinidir}
    NODE_ENV = test
    DEBUG = false
commands = 
    pytest {posargs:tests/} -v --tb=short

[testenv:py310]
# Python 3.10 test environment
description = Run tests with Python 3.10
basepython = python3.10

[testenv:py311]
# Python 3.11 test environment
description = Run tests with Python 3.11
basepython = python3.11

[testenv:py312]
# Python 3.12 test environment
description = Run tests with Python 3.12
basepython = python3.12

[testenv:lint]
# Linting environment
description = Run linting checks
deps = 
    ruff
    black
    isort
    mypy
skip_install = false
commands = 
    ruff check lightrag/ lightrag_mcp/ tests/
    ruff format --check lightrag/ lightrag_mcp/ tests/
    isort --check-only --diff lightrag/ lightrag_mcp/ tests/
    mypy lightrag/ --ignore-missing-imports --no-strict-optional

[testenv:security]
# Security scanning environment
description = Run security scans
deps = 
    bandit[toml]
    safety
    pip-audit
skip_install = false
commands = 
    bandit -r lightrag/ lightrag_mcp/ -ll
    safety check
    pip-audit

[testenv:coverage]
# Coverage testing environment
description = Run tests with coverage reporting
deps = 
    {[testenv]deps}
    coverage[toml]
commands = 
    pytest tests/ \
        --cov=lightrag \
        --cov=lightrag_mcp \
        --cov-report=term-missing \
        --cov-report=html:htmlcov \
        --cov-report=xml:coverage.xml \
        --cov-fail-under=70 \
        -v

[testenv:docs]
# Documentation environment
description = Build documentation
deps = 
    sphinx
    sphinx-rtd-theme
    sphinx-autodoc-typehints
    myst-parser
changedir = docs
allowlist_externals = make
commands = 
    sphinx-build -W -b html . _build/html

[testenv:package]
# Package building and validation environment
description = Build and validate package
deps = 
    build
    twine
skip_install = true
commands = 
    python -m build
    twine check dist/*

[testenv:integration]
# Integration testing environment
description = Run integration tests
deps = 
    {[testenv]deps}
    docker
    kubernetes
setenv =
    {[testenv]setenv}
    TEST_ENV = integration
commands = 
    pytest tests/integration/ -v --tb=short -m integration

[testenv:performance]
# Performance testing environment
description = Run performance tests
deps = 
    {[testenv]deps}
    pytest-benchmark
    memory-profiler
    psutil
commands = 
    pytest tests/production/test_performance.py \
        --benchmark-only \
        --benchmark-json=benchmark-results.json \
        -v

[testenv:api]
# API-specific testing environment
description = Run API tests
deps = 
    {[testenv]deps}
    httpx
    fastapi[all]
extras = api
setenv =
    {[testenv]setenv}
    API_TESTING = true
commands = 
    pytest tests/ -m api -v --tb=short

[testenv:storage]
# Storage backend testing environment
description = Run storage tests
deps = 
    {[testenv]deps}
    pymongo
    neo4j
    qdrant-client
setenv =
    {[testenv]setenv}
    STORAGE_TESTING = true
commands = 
    pytest tests/ -m storage -v --tb=short

[testenv:prod]
# Production-like testing environment
description = Run production tests
deps = 
    {[testenv]deps}
    gunicorn
    uvicorn[standard]
setenv =
    {[testenv]setenv}
    NODE_ENV = production
    DEBUG = false
commands = 
    pytest tests/production/ -v --tb=short

[testenv:unit]
# Unit tests only environment
description = Run unit tests only
commands = 
    pytest tests/ -m "unit and not slow" -v --tb=short

[testenv:fast]
# Fast testing environment (unit tests + basic checks)
description = Run fast tests and checks
commands = 
    pytest tests/ -m "unit and not slow" -x -v --tb=short
    ruff check lightrag/ lightrag_mcp/ --select=E9,F63,F7,F82

[testenv:dev]
# Development environment
description = Development environment setup
deps = 
    {[testenv]deps}
    pytest-watch
    pre-commit
extras = test,api
commands = 
    pre-commit install
    pytest tests/ -x -v --tb=short -m "not slow"

[testenv:clean]
# Cleanup environment
description = Clean up build artifacts and cache
skip_install = true
allowlist_externals = 
    rm
    find
commands = 
    rm -rf build/
    rm -rf dist/
    rm -rf .pytest_cache/
    rm -rf htmlcov/
    rm -rf .coverage
    find . -type d -name __pycache__ -exec rm -rf {} +
    find . -type f -name "*.pyc" -delete

# =============================================================================
# CONFIGURATION SECTIONS
# =============================================================================

[pytest]
# Pytest configuration (also in pyproject.toml)
minversion = 6.0
addopts = 
    -ra
    --strict-markers
    --strict-config
    --tb=short
testpaths = tests
filterwarnings = 
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
markers = 
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    security: marks tests as security tests
    unit: marks tests as unit tests
    api: marks tests as API tests
    storage: marks tests as storage tests
    core: marks tests as core functionality tests
    llm: marks tests as LLM provider tests
    document: marks tests as document processing tests
    graph: marks tests as knowledge graph tests
    vector: marks tests as vector operations tests
    rag: marks tests as RAG query tests
    mcp: marks tests as MCP server tests
    production: marks tests as production environment tests

[coverage:run]
# Coverage configuration
source = lightrag, lightrag_mcp
branch = true
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */.*
    */venv/*
    */.venv/*
    */build/*
    */dist/*
    */examples/*
    setup.py

[coverage:report]
# Coverage reporting configuration
exclude_lines = 
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
    except ImportError:
    except ModuleNotFoundError:
show_missing = true
skip_covered = false
precision = 2

[flake8]
# Flake8 configuration (legacy, using ruff instead)
max-line-length = 88
extend-ignore = E203, W503, E501
exclude = 
    .git,
    __pycache__,
    build,
    dist,
    .tox,
    .venv,
    venv,
    .eggs,
    *.egg-info

[isort]
# isort configuration
profile = black
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = lightrag,lightrag_mcp
known_third_party = 
    pytest,
    numpy,
    pandas,
    fastapi,
    pydantic,
    redis,
    psycopg2

[mypy]
# MyPy configuration
python_version = 3.10
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[bandit]
# Bandit security configuration
exclude_dirs = tests
skips = B101,B601